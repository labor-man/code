import * as THREE from 'three'
import * as pako from 'pako'

export default () => {
    const rawPointsString = ""
    console.log('createPointCloud')
    // const before = Date.now()
    const decodedPointsString = atob(rawPointsString);

    const charPointsArray = decodedPointsString.split('').map(function(x){return x.charCodeAt(0);});
    const uint8Array = new Uint8Array(charPointsArray)
    const float32Array = new Float32Array(uint8Array.buffer)
    const filteredFloat32Array = float32Array.filter((v, i) => (i+1)%4!=0).map(v => 20*v)
    const geometry = new THREE.BufferGeometry();
    geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( filteredFloat32Array, 3 ) );
    var material = new THREE.PointsMaterial( { color: 'red' } );

    var pointCloud = new THREE.Points( geometry, material);
    pointCloud.rotation.x = Math.PI*-.5
    pointCloud.position.y = -5
    pointCloud.rotation.z = Math.PI*.5
    return pointCloud
}

Git保存的是-------------------------------------------------

Git保存的是快照，不是文件变化或差异

指针-------------------------------------------------

Git分支是指针，指向提交对象

HEAD指针指向当前分支

切换分支时
1.HEAD指向对应分支 
2.工作目录恢复成对应分支指向的快照内容

提交-------------------------------------------------

每次提交包括三种文件：
1. 提交对象（提交信息+父对象指针+指向树对象的指针）
⬇
2. 树对象（目录结构和blob对象索引）
⬇
3. blob对象（保存文件快照）

典型工作流-------------------------------------------------

新需求 ➡ 创建分支A ➡ 线上出现问题 ➡ 切回线上分支 ➡ 创建分支B解决问题 ➡ 测试通过后，切回线上分支合并并提交 ➡ 切分支A

分类-------------------------------------------------

长期分支
体现的不同层次的稳定性

短期分支
主题分支，用来实现单一特性或其相关工作

查看----------------------------------------------------

查看分支列表
git branch

查看分支列表和当前指向的提交
git branch -v

修改名字----------------------------------------------------

git branch (-m | -M) [<oldbranch>] <newbranch>

筛选----------------------------------------------------

筛选出已经合并到当前分支的
git branch --merged

筛选出未合并到当前分支的
git branch --no-merged

删除----------------------------------------------------

git branch -d <branch>  (试图删除包含未合并工作的分支会失败，强制删除使用-D)

合并----------------------------------------------------

合并到当前分支
git merge <branch>

合并----------------------------------------------------

合并到当前分支
git merge <branch>

合并----------------------------------------------------

合并到当前分支
git merge <branch>

变基----------------------------------------------------

变基到目标分支
git rebase <target_branch>  (然后一般会checkout到目标分支进行快进合并)

注意：

合并保留记录了“实际发生了什么”
变基方便了后来的读者阅读“项目过程中发生的事”

只对尚未推送或分享给别人的本地修改执行变基操作清理历史， 从不对已推送至别处的提交执行变基操作，这样，你才能享受到两种方式带来的便利。
一个典型的工作流

1. 开发某个网站
2. 为了实现一个新的用户需求，创建一个分支
3. 在这个分支上开展工作

突然，线上出现了一个严重的问题需要紧急修补，需要：

1. 切换回线上分支（production branch）
2. 为这个紧急任务新建一个分支，并在其中修复它
3. 在测试通过之后，切换回线上分支，然后合并这个修补分支，最后将改动推送到线上分支
4. 切换回最初的工作分支，继续工作

-------------------------------------------------

          [master]
            ⬇
C0 ⬅ C1 ⬅ C2
            ⬆
          [iss53]

git checkout -b iss53
创建分支iss53并切换过去

-------------------------------------------------

         [master]
            ⬇
C0 ⬅ C1 ⬅ C2 ⬅ C3
                 ⬆
               [iss53]

...coding并提交

-------------------------------------------------

         [master]  [hotfix]
            ⬇        ⬇
C0 ⬅ C1 ⬅ C2   ⬅   C4
              ↖ 
				C3
                ⬆
              [iss53]

git checkout -b hotfix
...coding并提交

-------------------------------------------------

                  [master]
                   	 |
                  [hotfix]
                     ⬇
C0 ⬅ C1 ⬅ C2   ⬅   C4
              ↖ 
				C3
                ⬆
              [iss53]

git checkout master
git merge hotfix
试图合并两个分支时，如果一个分支顺着走下去能到达另一个分支，Git在合并的时候，只是简单地将指针向前推进，称为Fast-forward合并

git branch -d hotfix
不在需要hotfix分支，因为master已经指向同一位置

-------------------------------------------------

                       [master]
            			   ⬇
C0 ⬅ C1 ⬅ C2 ⬅ C4   ⬅   C6
              ↖          ↙
				C3 ⬅ C5 
                      ⬆
                    [iss53]

git checkout iss53
...coding并提交
git checkout master
git merge iss53
由于master分支所在提交并不是iss53分支所在提交的直接祖先，这种情况时，Git使用两个分支所指提交的快照以及两分支的公共祖先（C2），做一个简单的三方合并。

git branch -d iss53
修改已经合并进来之后，就不再需要iss53分支了

-------------------------------------------------

合并遇到冲突
如果待合并的两个分支都改了同一文件的同一处，就会产生合并冲突，包含因包含冲突而有待解决的文件，都会以未合并状态标识出来
解决冲突之后需要使用git add命令将其标记为冲突已解决状态
